import pprint
import subprocess

import lit.util
import lit.llvm.config
# from lit.llvm import llvm_config
# FIXME: why do I need to create a new LLVMConfig here, is there no way to use the parent one?
local_llvm_config = lit.llvm.config.LLVMConfig(lit_config, config)

config.name = 'lld'
config.suffixes = ['.test', '.s', '.ll', '.c', '.cpp']

# print 'CHERI'

def add_sub(value, replacement):
   config.substitutions.append( (value, replacement) )

def add_invalid_sub(sub, replacement):
    add_sub(' ' + sub + ' ', """*** Do not use '%s' in tests, use '%s'. ***""" %
          (sub, replacement) )

config.lld = lit.util.which('ld.lld', config.llvm_tools_dir)


# These substitutions rely on %clang, etc. so must come before even if clang isn't found
add_sub('%clang_link_purecap ', '%cheri_clang -mabi=purecap ' +
        '-fuse-ld=' + config.lld + ' -nostdlib -Wl,-melf64btsmip_cheri_fbsd ')
local_llvm_config.add_cheri_tool_substitutions(['llvm-mc'])
local_llvm_config.use_clang(required=False)
if config.clang:
    if lit_config.debug:
        print 'Found clang:', config.clang
    config.available_features.add('clang')
    add_sub('%legacy_caprelocs_flag', '-mllvm -legacy-cheri-cap-relocs ')
else:
    lit_config.note('Could not find clang -> skipping most CHERI linker tests!')
cheri_lld_cmd_base = config.lld + ' --eh-frame-hdr --enable-new-dtags -melf64btsmip_cheri_fbsd '
# TODO: do we still need --no-warn-mismatch?
add_sub('%cheri_lld_shlib', cheri_lld_cmd_base + '-Bshareable ')
add_sub('%cheri_lld_static', cheri_lld_cmd_base + '-Bstatic ')
add_sub('%cheri_lld_dynamic', cheri_lld_cmd_base + '-Bdynamic '
        '-dynamic-linker /libexec/ld-cheri-elf.so.1 ')
# TODO: -pie and -pie -static

config.capsizefix = lit.util.which('capsizefix', config.llvm_tools_dir)
if config.capsizefix:
    print 'Found capsizefix:', config.capsizefix
    add_sub('%capsizefix ', config.capsizefix + ' ')

add_invalid_sub('capsizefix', '%capsizefix')

cheri_ld_bfd = os.getenv('CHERI_LD_BFD')
if cheri_ld_bfd and not os.path.isfile(cheri_ld_bfd):
    lit_config.warning('$CHERI_LD_BFD is not a valid file: ' + cheri_ld_bfd)
    cheri_ld_bfd = None
# If that is not set try falling back to finding ld.bfd in $CHERI_SDK or in $PATH
if not cheri_ld_bfd:
    path_to_check = None
    cheri_sdk_env = os.getenv('CHERI_SDK')
    if cheri_sdk_env:
        path_to_check = cheri_sdk_env + os.path.pathsep + os.path.join(cheri_sdk_env, "bin")
    cheri_ld_bfd = lit.util.which('ld.bfd', path_to_check)

# final fallback try to find it in PATH
if cheri_ld_bfd:
    lit_config.note('CHECKING ' + cheri_ld_bfd + ' for CHERI support')
    supported_emulations = lit.util.executeCommand([cheri_ld_bfd, '-V'])[0]
    if 'elf64btsmip_cheri_fbsd' in supported_emulations:
        config.available_features.add('cheri_ld_bfd')
        lit_config.note(cheri_ld_bfd + ' supports CHERI!')
        add_sub('%clang_link_purecap_bfd ', config.clang + ' -mabi=purecap '
                '-target cheri-unknown-freebsd -msoft-float -fuse-ld=' +
                cheri_ld_bfd + ' -nostdlib -Wl,-melf64btsmip_cheri_fbsd ')
        add_sub('%cheri_bfd', cheri_ld_bfd + ' --eh-frame-hdr --enable-new-dtags')
    else:
        lit_config.note(cheri_ld_bfd + ' does not support CHERI.')
        cheri_ld_bfd = None

if not cheri_ld_bfd:
    lit_config.note('ld.bfd with CHERI support not found, consider setting '
                       '$CHERI_LD_BFD env var to point to it.')
    lit_config.note('Alternatively you can also set $CHERI_SDK to point to the '
                    'SDK root directory.')

# print('after: ')
# pprint.pprint(vars(config))
